#+TITLE: Sunpower
#+DESCRIPTION: Unofficial tests of apparent Sunpower API

[[https://codeclimate.com/github/jeffkowalski/sunpower/badges/gpa.svg]]

This project uses the Sunpower client portal API (https://monitor.us.sunpower.com)
to gather data on production and consumption.  I implemented this in Python 
as that is my tool of choice today.   Jeff did the bulk of the investation into
the source of the data.  I had wanted to intercept the data on my network by 
implementing a bridged Pi between the sunpower supervisor and my router but that
traffic apepars to be encrypted with no means of interception.  So, instead this
runs on a local Raspberry Pi with a simple sqlite database.   I gather the data
every 5 minutes on a cron job.   If you do not have the consumption monitor, your
'eu' values will be null.  Obviously, when it's not sunny, the 'ep' values will be null

On reviewing the various interfaces, they were either developed by different people
or changes were made over time.  The authentication token is referred to as tokenid, id,
and guid in various places...

* API
** API point: https://monitor.us.sunpower.com/CustomerPortal

** Services mapped from [[https://monitor.us.sunpower.com/v06232016102250/C:/Program Files (x86)/Jenkins/workspace/SunpowerSpa-Master/src/scripts/config/dataServices/dataServices.js][dataServices.js]]:
#+BEGIN_SRC javascript
AUTH: 'Auth/Auth.svc/',
AUTHENTICATION: 'Auth/Authentication.svc/',
SYSTEM_INFO: 'SystemInfo/SystemInfo.svc/',
CURRENT_POWER: 'CurrentPower/CurrentPower.svc/',
SITE_INFO: 'SiteInfo/SiteInfo.svc/',
ALERTS_INFO: 'AlertsInfo/AlertsInfo.svc/',
ALERTS: 'Alerts/Alerts.svc/',
NOTIFY: 'Notify/Notify.svc/',
BILL_SAVINGS: 'BillSavings/BillSavings.svc/',
CUSTOMER_INFO: 'CustomerInfo/CustomerInfo.svc/',
SITE_LIST: 'SiteList/SiteList.svc/',
CONFIG: 'Config/Config.svc/',
REFERRALS: 'Referrals/Referrals.svc/',
SCHEDULE: 'Schedule/Schedule.svc/'
#+END_SRC

** Notable services
https://monitor.us.sunpower.com/CustomerPortal/Auth/Auth.svc/help
https://monitor.us.sunpower.com/CustomerPortal/Auth/Auth.svc/help/operations/Authenticate
https://monitor.us.sunpower.com/CustomerPortal/CurrentPower/CurrentPower.svc/help
https://monitor.us.sunpower.com/CustomerPortal/CurrentPower/CurrentPower.svc/help/operations/GetCurrentPower
https://monitor.us.sunpower.com/CustomerPortal/SystemInfo/SystemInfo.svc/help
https://monitor.us.sunpower.com/CustomerPortal/SystemInfo/SystemInfo.svc/help/operations/getHourlyEnergyData
https://monitor.us.sunpower.com/CustomerPortal/SystemInfo/SystemInfo.svc/getEnergyData?endDateTime={0}&guid={1}&interval=minute&startDateTime={2}

* Real time net display
** Helpers
*** Example credentials file

I created a unique user 'sunpower' that has its own cron schedule and rights to the database and that's about it.

This is stored in an untracked config.py file in the same folder as the code.  Could be placed in the user's (sunpower) home directory.

#+BEGIN_SRC py
---
username = "username"
password = "password"
isPersistent =  true
#+END_SRC

*** get credentials
#+NAME: get-credentials
#+BEGIN_SRC ruby :results raw silent :var file="/home/jeff/.credentials/sunpower.yaml"
  require 'yaml'
  require 'json'
  p YAML.load_file(file).to_json
#+END_SRC

*** get json value
#+NAME: get-json-value
#+BEGIN_SRC ruby :results raw silent :var string="" :var name=""
require 'json'
result = JSON.parse(string)
name.split('.').each { |key| result = result[key] }
p result
#+END_SRC

*** pretty-print json
#+NAME: jq
#+BEGIN_SRC emacs-lisp :var data=""
  (json-reformat-from-string data)
#+END_SRC

** Authenticate

#+NAME: Authenticate
#+BEGIN_SRC bash  :results raw replace drawer :var credentials=get-credentials(file="/home/jeff/.credentials/sunpower.yaml")
curl -H "Content-Type:application/json" -X POST -d "$credentials" https://monitor.us.sunpower.com/CustomerPortal/Auth/Auth.svc/Authenticate
#+END_SRC

#+RESULTS: Authenticate
:RESULTS:
{"StatusCode":"200","ResponseMessage":"Success","Payload":{"ExpiresInMinutes":259199,"TokenID":"c6d435f9-0de3-47ac-99bd-9798ee2f206c"}}
:END:

** Get Current Power

#+NAME: CurrentPower
#+BEGIN_SRC sh :results raw replace drawer :var token=get-json-value(string=Authenticate,name="Payload.TokenID") :post jq(data=*this*)
curl --silent "https://monitor.us.sunpower.com/CustomerPortal/CurrentPower/CurrentPower.svc/GetCurrentPower?id=$token"
#+END_SRC

#+RESULTS: CurrentPower
:RESULTS:
{
    "StatusCode": "200",
    "ResponseMessage": "Success",
    "Payload": {
        "AddressId": 91299,
        "CurrentProduction": 2.914,
        "SystemList": [
            {
                "DateTimeReceived": "2016-07-10T14:35:00",
                "Production": 2.914
            }
        ]
    }
}
:END:

** Get Hourly Energy Data

#+NAME: HourlyEnergyData
#+BEGIN_SRC sh :results raw replace drawer :var token=get-json-value(string=Authenticate,name="Payload.TokenID") :post jq(data=*this*)
curl --silent "https://monitor.us.sunpower.com/CustomerPortal/SystemInfo/SystemInfo.svc/getHourlyEnergyData?tokenid=$token&timestamp=2016-08-08T00:00:00"
#+END_SRC

The payload is string with an array of "|"-delimited records.
Each record has the following comma-separated fields:
| bt | timestamp of sample | YYYY-MM-DDTHH:MM:SS |
| ep | energy produced     | _float_ kWh         |
| eu | energy used         | _float_             |
| mp | _unknown_           | _float_             |

#+RESULTS: HourlyEnergyData
:RESULTS:
{
    "StatusCode": "200",
    "ResponseMessage": "Success",
    "Payload": "2016-08-07T06:00:00,0,0,0.04|2016-08-07T07:00:00,0.12,0,0.2|2016-08-07T08:00:00,0.37,0,0.53|2016-08-07T09:00:00,0.82,0,1.44|2016-08-07T10:00:00,2.27,0,4.01|2016-08-07T11:00:00,3.7,0,3.83|2016-08-07T12:00:00,3.76,0,3.83|2016-08-07T13:00:00,3.52,0,3.67|2016-08-07T14:00:00,3.06,0,3.31|2016-08-07T15:00:00,2.41,0,2.75|2016-08-07T16:00:00,1.56,0,1.97|2016-08-07T17:00:00,0.62,0,1.04|2016-08-07T18:00:00,0.14,0,0.2|2016-08-07T19:00:00,0.06,0,0.11|2016-08-07T20:00:00,0,0,0|2016-08-08T06:00:00,0,0,0.03|2016-08-08T07:00:00,0.12,0,0.25|2016-08-08T08:00:00,0.46,0,0.7|2016-08-08T09:00:00,1.76,0,3.31|2016-08-08T10:00:00,3.48,0,3.63|2016-08-08T11:00:00,3.7,0,3.74|2016-08-08T12:00:00,3.68,0,3.73|2016-08-08T13:00:00,3.44,0,3.58|2016-08-08T14:00:00,2.99,0,3.22|2016-08-08T15:00:00,2.36,0,2.68|2016-08-08T16:00:00,1.52,0,1.92|2016-08-08T17:00:00,0.6,0,1|2016-08-08T18:00:00,0.14,0,0.19|2016-08-08T19:00:00,0.07,0,0.11|2016-08-08T20:00:00,0,0,0|2016-08-09T06:00:00,0,0,0.04|2016-08-09T07:00:00,0.15,0,0.3|2016-08-09T08:00:00,0.48,0,0.68|2016-08-09T09:00:00,2.12,0,3.25|2016-08-09T10:00:00,3.43,0,3.58|2016-08-09T11:00:00,3.65,0,3.72|2016-08-09T12:00:00,3.68,0,3.73|2016-08-09T13:00:00,3.47,0,3.62|2016-08-09T14:00:00,3.01,0,3.25|2016-08-09T15:00:00,2.38,0,2.71|2016-08-09T16:00:00,1.54,0,1.95|2016-08-09T17:00:00,0.6,0,1|2016-08-09T18:00:00,0.14,0,0.19|2016-08-09T19:00:00,0.02,0,0.11"
}
:END:
